import os
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from tkinter import Tk, filedialog, Button, Label, Entry, StringVar, messagebox

def generate_keys(passphrase):
    """Genera un par de claves RSA y las guarda en archivos cifrados con una frase de contraseña."""
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()

    # Convertir la frase a bytes y cifrar la clave privada
    passphrase_bytes = passphrase.encode()
    
    # Guardar la clave privada cifrada
    with open("private_key.pem", "wb") as f:
        f.write(private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.BestAvailableEncryption(passphrase_bytes)
        ))

    # Guardar la clave pública
    with open("public_key.pem", "wb") as f:
        f.write(public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        ))

    print("Claves generadas con éxito.")


def encrypt_file(file_path, public_key_path):
    """Cifra un archivo utilizando una clave pública RSA y AES."""
    try:
        with open(public_key_path, "rb") as key_file:
            public_key = serialization.load_pem_public_key(key_file.read(), backend=default_backend())

        with open(file_path, "rb") as f:
            file_data = f.read()

        aes_key = os.urandom(32)
        iv = os.urandom(16)

        cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
        encryptor = cipher.encryptor()
        encrypted_file_data = encryptor.update(file_data) + encryptor.finalize()

        encrypted_key = public_key.encrypt(
            aes_key,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )

        encrypted_file_path = file_path + ".encrypted"
        with open(encrypted_file_path, "wb") as f:
            f.write(iv + encrypted_key + encrypted_file_data)

        messagebox.showinfo("Éxito", f"Archivo cifrado guardado como '{encrypted_file_path}'.")

    except Exception as e:
        messagebox.showerror("Error", str(e))


def decrypt_file(encrypted_file_path, private_key_path, passphrase):
    """Descifra un archivo utilizando una clave privada RSA y AES."""
    try:
        with open(private_key_path, "rb") as key_file:
            private_key = serialization.load_pem_private_key(
                key_file.read(),
                password=passphrase.encode(),
                backend=default_backend()
            )

        with open(encrypted_file_path, "rb") as f:
            iv = f.read(16)
            encrypted_key = f.read(256)
            encrypted_file_data = f.read()

        aes_key = private_key.decrypt(
            encrypted_key,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )

        cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
        decryptor = cipher.decryptor()
        decrypted_file_data = decryptor.update(encrypted_file_data) + decryptor.finalize()

        decrypted_file_path = encrypted_file_path.replace(".encrypted", ".decrypted")
        with open(decrypted_file_path, "wb") as f:
            f.write(decrypted_file_data)

        messagebox.showinfo("Éxito", f"Archivo descifrado guardado como '{decrypted_file_path}'.")

    except Exception as e:
        messagebox.showerror("Error", str(e))


def select_file_to_encrypt():
    file_path = filedialog.askopenfilename()
    if file_path:
        encrypt_file(file_path, 'public_key.pem')


def select_file_to_decrypt():
    file_path = filedialog.askopenfilename()
    if file_path:
        passphrase = passphrase_entry.get()
        decrypt_file(file_path, 'private_key.pem', passphrase)


def create_gui():
    root = Tk()
    root.title("Cifrado y Descifrado RSA")

    # Entrada para la frase de contraseña
    global passphrase_entry
    passphrase_label = Label(root, text="Frase de Contraseña:")
    passphrase_label.pack(pady=5)
    
    passphrase_entry = Entry(root, show="*")
    passphrase_entry.pack(pady=5)

    # Botón para generar claves
    generate_keys_button = Button(root, text="Generar Claves RSA", command=lambda: generate_keys(passphrase_entry.get()))
    generate_keys_button.pack(pady=10)

    # Botón para cifrar
    encrypt_button = Button(root, text="Seleccionar Archivo para Cifrar", command=select_file_to_encrypt)
    encrypt_button.pack(pady=10)

    # Botón para descifrar
    decrypt_button = Button(root, text="Seleccionar Archivo para Descifrar", command=select_file_to_decrypt)
    decrypt_button.pack(pady=10)

    root.mainloop()


if __name__ == "__main__":
    create_gui()
